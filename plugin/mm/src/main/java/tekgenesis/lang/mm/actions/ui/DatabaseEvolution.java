
// ...............................................................................................................................
//
// (C) Copyright  2011/2017 TekGenesis.  All Rights Reserved
// THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF TekGenesis.
// The copyright notice above does not evidence any actual or intended
// publication of such source code.
//
// ...............................................................................................................................

package tekgenesis.lang.mm.actions.ui;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.TreeSet;

import javax.swing.*;

import com.intellij.openapi.module.Module;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import tekgenesis.common.collections.ImmutableList;
import tekgenesis.common.core.Option;
import tekgenesis.common.core.Strings;
import tekgenesis.lang.mm.FileUtils;
import tekgenesis.lang.mm.ProjectUtils;

import static java.lang.Integer.parseInt;

import static tekgenesis.common.collections.Colls.listOf;
import static tekgenesis.lang.mm.util.Utils.getOrCreateDirectory;

/**
 * Database automatic evolution.
 */
public class DatabaseEvolution extends JDialog {

    //~ Instance Fields ..............................................................................................................................

    private JButton           buttonCancel;
    private JButton           buttonOK;
    private JComboBox<String> comboBox1;
    private JPanel            contentPane;
    private String            currentModuleName = null;
    private boolean           isOk              = false;
    private JLabel            jCurrentVersion;
    private JLabel            jLabel;
    private final Project     project;
    private JSpinner          spinner1;
    private JSpinner          spinner2;
    private JSpinner          spinner3;

    //~ Instance initializers ........................................................................................................................

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    //~ Constructors .................................................................................................................................

    /** default constructor. */
    public DatabaseEvolution(final Project project)
        throws IOException
    {
        this.project = project;
        isOk         = false;
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        buttonOK.addActionListener(e -> onOK());

        buttonCancel.addActionListener(e -> onCancel());

        final ImmutableList<String> modules = ProjectUtils.getAllModulesNames(project).filter(s -> {
                    final Module      module        = ProjectUtils.findModuleByName(project, s);
                    final VirtualFile resourcesRoot = module == null ? null : FileUtils.getResourcesRoot(module);
                    return resourcesRoot != null;
                }).toList();

        final Option<String> first = modules.getFirst();

        if (first.isPresent()) currentModuleName = first.get();

        jCurrentVersion.setText(getLastVersionNro());
        setVersion();

        comboBox1.setModel(new DefaultComboBoxModel<>(modules.toArray(new String[modules.size()])));

        comboBox1.addActionListener(e -> {
            final String moduleName = (String) comboBox1.getSelectedItem();
            if (!moduleName.equals(currentModuleName)) {
                currentModuleName = moduleName;
                try {
                    setVersion();
                }
                catch (final IOException e1) {
                    throw new RuntimeException(e1);
                }
            }
        });

        setSpinnerValidation(spinner1);
        setSpinnerValidation(spinner2);
        setSpinnerValidation(spinner3);

        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent e) {
                    onCancel();
                }
            });

        contentPane.registerKeyboardAction(e -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }  // end ctor DatabaseEvolution

    //~ Methods ......................................................................................................................................

    /** @noinspection  ALL */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    /** .* */
    public boolean isOk() {
        return isOk;
    }

    /** get new version.* */

    public String getNewVersion() {
        final ImmutableList<String> list = listOf(spinner1.getValue().toString(), spinner2.getValue().toString(), spinner3.getValue().toString());
        return Strings.join(list, '.');
    }

    /** get Selected Module. */
    public String getSelectedModule() {
        return comboBox1.getSelectedItem().toString();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
     * call it in your code!
     *
     * @noinspection  ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1,
            new GridConstraints(2,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                1,
                null,
                null,
                null,
                0,
                false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                1,
                null,
                null,
                null,
                0,
                false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        buttonOK = new JButton();
        buttonOK.setText("OK");
        panel2.add(buttonOK,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        panel3.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Select Module"));
        comboBox1 = new JComboBox<String>();
        panel3.add(comboBox1,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(2, 4, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel4,
            new GridConstraints(1,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        panel4.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Version"));
        JLabel jLabel = new JLabel();
        jLabel.setText("Current:");
        panel4.add(jLabel,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        jCurrentVersion = new JLabel();
        jCurrentVersion.setText("Label");
        panel4.add(jCurrentVersion,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final JLabel label1 = new JLabel();
        label1.setText("New");
        panel4.add(label1,
            new GridConstraints(1,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        spinner1 = new JSpinner();
        panel4.add(spinner1,
            new GridConstraints(1,
                1,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        spinner2 = new JSpinner();
        panel4.add(spinner2,
            new GridConstraints(1,
                2,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        spinner3 = new JSpinner();
        panel4.add(spinner3,
            new GridConstraints(1,
                3,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
    }  // end method $$$setupUI$$$

    private void onCancel() {
        isOk = false;
        dispose();
    }

    private void onOK() {
        isOk = true;
        dispose();
    }

    private String getLastVersionNro()
        throws IOException
    {
        String lastVersion = getLastVersion(project, currentModuleName);
        lastVersion = lastVersion == null ? "1.0.0" : lastVersion.substring(1);
        return lastVersion;
    }

    private void setSpinnerValidation(final JSpinner spinner) {
        spinner.addChangeListener(e -> {
            final Integer value = (Integer) spinner.getValue();
            if (value < 0) spinner.setValue(0);
        });
    }

    private void setVersion()
        throws IOException
    {
        final String lastVersion = getLastVersionNro();
        jCurrentVersion.setText(lastVersion);
        final ImmutableList<String> version = Strings.split(lastVersion, '.');
        spinner1.setValue(parseInt(version.get(0)));
        spinner2.setValue(parseInt(version.get(1)));
        final int value = version.size() > 2 ? parseInt(version.get(2)) + 1 : 1;
        spinner3.setValue(value);
    }

    //~ Methods ......................................................................................................................................

    /** Get Available Version.* */
    public static TreeSet<String> getVersions(@NotNull Project project, @NotNull String moduleName)
        throws IOException
    {
        final TreeSet<String> versions      = new TreeSet<>();
        final Module          module        = ProjectUtils.findModuleByName(project, moduleName);
        final VirtualFile     resourcesRoot = FileUtils.getResourcesRoot(module);

        if (resourcesRoot != null) {
            final VirtualFile dbDir = getOrCreateDirectory(resourcesRoot, DB_DIR);
            if (dbDir != null) {
                final VirtualFile versionDir = getOrCreateDirectory(dbDir, VERSION_DIR);
                if (versionDir != null) {
                    for (final VirtualFile child : versionDir.getChildren())
                        versions.add(child.getName());
                }
            }
        }

        return versions;
    }

    /** .* */
    @Nullable private static String getLastVersion(@NotNull Project project, @NotNull String moduleName)
        throws IOException
    {
        final TreeSet<String> versions = getVersions(project, moduleName);
        return versions.isEmpty() ? null : versions.last();
    }

    //~ Static Fields ................................................................................................................................

    private static final long serialVersionUID = -8021478651958359225L;

    @SuppressWarnings("DuplicateStringLiteralInspection")
    public static final String VERSION_DIR = "version";

    public static final String DB_DIR = "db";
}  // end class DatabaseEvolution
