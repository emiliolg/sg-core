
// ...............................................................................................................................
//
// (C) Copyright  2011/2017 TekGenesis.  All Rights Reserved
// THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF TekGenesis.
// The copyright notice above does not evidence any actual or intended
// publication of such source code.
//
// ...............................................................................................................................

package tekgenesis.lang.mm.actions.introspector;

import java.awt.*;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.Driver;
import java.sql.SQLException;
import java.util.List;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import com.intellij.ide.fileTemplates.FileTemplateUtil;
import com.intellij.ide.fileTemplates.impl.FileTemplateBase;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.TextComponentAccessor;
import com.intellij.psi.PsiDirectory;
import com.intellij.psi.PsiPackage;
import com.intellij.ui.RecentsManager;
import com.intellij.ui.TextFieldWithHistoryWithBrowseButton;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import org.jetbrains.annotations.Contract;
import org.jetbrains.annotations.Nullable;

import tekgenesis.codegen.sql.MetaModelFromSql;
import tekgenesis.common.core.Tuple;
import tekgenesis.database.DbIntrospector;
import tekgenesis.database.introspect.SchemaInfo;
import tekgenesis.database.introspect.TableInfo;
import tekgenesis.lang.mm.MMFileTemplate;
import tekgenesis.repository.ModelRepository;
import tekgenesis.util.MMDumper;

import static tekgenesis.common.Predefined.cast;
import static tekgenesis.common.collections.Colls.filter;
import static tekgenesis.common.core.Constants.META_MODEL_EXT;
import static tekgenesis.common.core.Strings.capitalizeFirst;
import static tekgenesis.database.DatabaseType.typeFromConnection;
import static tekgenesis.lang.mm.FileUtils.checkAndCreateDirectoriesForFileName;
import static tekgenesis.lang.mm.FileUtils.getPackageForDirectory;
import static tekgenesis.lang.mm.actions.introspector.EntitiesFromDBAction.ENTITIES_FROM_DB;
import static tekgenesis.lang.mm.psi.PsiUtils.getProject;
import static tekgenesis.lang.mm.psi.PsiUtils.getViewDirectory;

/**
 * Introspector dialog.
 */
public class IntrospectorDialog extends JDialog {

    //~ Instance Fields ..............................................................................................................................

    private JButton    cancelButton;
    private JTextField connectionURL;

    private JPanel              contentPane;
    private JButton             createButton;
    private final AnActionEvent event;
    private JTextField          fileName;

    private DbIntrospector                       introspector               = null;
    private TextFieldWithHistoryWithBrowseButton jarBrowse;
    private JComboBox<SchemaInfo>                schema;
    private JPanel                               schemaPanel;
    private JList<String>                        tablesList;
    private JButton                              testConnectionButton;
    private JPanel                               testConnectionMessage;
    private JLabel                               testConnectionMessageField;

    //~ Instance initializers ........................................................................................................................

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    //~ Constructors .................................................................................................................................

    /** Constructor for dialog. */
    public IntrospectorDialog(final AnActionEvent e) {
        event = e;
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(createButton);
        setTitle(ENTITIES_FROM_DB);

        createButton.addActionListener(ev -> onOK());
        cancelButton.addActionListener(ev -> onCancel());
        schema.addItemListener(ev -> {
            if (ev.getStateChange() == ItemEvent.SELECTED) schemaSelected();
        });

        tablesList.setSelectionModel(new DefaultListSelectionModel() {
                private static final long serialVersionUID = -2625296895497357109L;

                @Override public void setSelectionInterval(int index0, int index1) {
                    if (super.isSelectedIndex(index0)) super.removeSelectionInterval(index0, index1);
                    else super.addSelectionInterval(index0, index1);
                }
            });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
                public void windowClosing(WindowEvent ev) {
                    onCancel();
                }
            });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(ev -> onCancel(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
            JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        initContent();
    }

    //~ Methods ......................................................................................................................................

    /** @noinspection  ALL */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
     * call it in your code!
     *
     * @noinspection  ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(6, 2, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setEnabled(true);
        contentPane.setMinimumSize(new Dimension(750, 400));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1,
            new GridConstraints(5,
                0,
                1,
                2,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                1,
                null,
                null,
                null,
                0,
                false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                1,
                null,
                null,
                null,
                0,
                false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        createButton = new JButton();
        createButton.setText("Create");
        panel2.add(createButton,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        panel2.add(cancelButton,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3,
            new GridConstraints(0,
                0,
                1,
                2,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        final JLabel label1 = new JLabel();
        label1.setText("Connection URL");
        panel3.add(label1,
            new GridConstraints(1,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        connectionURL = new JTextField();
        panel3.add(connectionURL,
            new GridConstraints(1,
                1,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                new Dimension(150, -1),
                null,
                0,
                false));
        final JLabel label2 = new JLabel();
        label2.setText("Driver JAR");
        panel3.add(label2,
            new GridConstraints(2,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final JLabel label3 = new JLabel();
        label3.setText("File Name");
        panel3.add(label3,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        fileName = new JTextField();
        panel3.add(fileName,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                new Dimension(150, -1),
                null,
                0,
                false));
        jarBrowse = new TextFieldWithHistoryWithBrowseButton();
        panel3.add(jarBrowse,
            new GridConstraints(2,
                1,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        schemaPanel = new JPanel();
        schemaPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(schemaPanel,
            new GridConstraints(3,
                0,
                1,
                2,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        final JLabel label4 = new JLabel();
        label4.setText("Select Schema");
        schemaPanel.add(label4,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        schema = new JComboBox<SchemaInfo>();
        schemaPanel.add(schema,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final JLabel label5 = new JLabel();
        label5.setText("Select Tables");
        schemaPanel.add(label5,
            new GridConstraints(1,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final JScrollPane scrollPane1 = new JScrollPane();
        schemaPanel.add(scrollPane1,
            new GridConstraints(1,
                1,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
                null,
                null,
                null,
                0,
                false));
        tablesList = new JList<String>();
        scrollPane1.setViewportView(tablesList);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel4,
            new GridConstraints(1,
                0,
                1,
                2,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        testConnectionButton = new JButton();
        testConnectionButton.setText("Test Connection");
        panel4.add(testConnectionButton,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final Spacer spacer2 = new Spacer();
        panel4.add(spacer2,
            new GridConstraints(0,
                2,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                1,
                null,
                null,
                null,
                0,
                false));
        final Spacer spacer3 = new Spacer();
        panel4.add(spacer3,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                1,
                null,
                null,
                null,
                0,
                false));
        testConnectionMessage = new JPanel();
        testConnectionMessage.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(testConnectionMessage,
            new GridConstraints(2,
                0,
                1,
                2,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        testConnectionMessageField = new JLabel();
        testConnectionMessageField.setText("");
        testConnectionMessage.add(testConnectionMessageField,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final Spacer spacer4 = new Spacer();
        contentPane.add(spacer4,
            new GridConstraints(4,
                0,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_VERTICAL,
                1,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                null,
                null,
                null,
                0,
                false));
    }  // end method $$$setupUI$$$

    private void changeListeners() {
        connectionURL.getDocument().addDocumentListener(new DocumentListener() {
                public void changedUpdate(DocumentEvent e) {
                    changeURL();
                }

                public void removeUpdate(DocumentEvent e) {
                    changeURL();
                }

                public void insertUpdate(DocumentEvent e) {
                    changeURL();
                }
            });
    }

    private void changeURL() {
        connectionNotTested();
    }

    private void connectionError() {
        testConnectionMessageField.setText(ERROR_MESSAGE);
    }

    private void connectionNotTested() {
        schemaPanel.setVisible(false);
        createButton.setEnabled(false);
        testConnectionButton.setEnabled(true);
        testConnectionMessageField.setText(INFO_MESSAGE);
    }

    private void connectionSuccess() {
        createButton.setEnabled(true);
        testConnectionButton.setEnabled(false);
        testConnectionMessageField.setText(SUCCESS_MESSAGE);

        populateSchemas();
    }

    @Nullable private Connection createConnection(Driver driver)
        throws SQLException
    {
        return driver.connect(connectionURL.getText(), null);
    }

    private void driverError() {
        testConnectionMessageField.setText(DRIVER_ERROR_MESSAGE);
    }

    @Contract("null -> null")
    @Nullable private List<String> filterNonExisting(@Nullable final List<String> recents) {
        return recents == null ? null : filter(recents, s -> new File(s).exists()).toList();
    }

    private void generateFile() {
        final SchemaInfo   selectedSchema = cast(schema.getSelectedItem());
        final List<String> tablesInSchema = tablesList.getSelectedValuesList();

        if (tablesInSchema.isEmpty()) return;

        final Tuple<PsiDirectory, String> dirFileName = checkAndCreateDirectoriesForFileName(getViewDirectory(event),
                fileName.getText(),
                META_MODEL_EXT);
        final String                      newName     = capitalizeFirst(dirFileName.second());

        final Tuple<PsiDirectory, PsiPackage> dirPackage  = getPackageForDirectory(dirFileName.first());
        final PsiDirectory                    directory   = dirPackage.first();
        final PsiPackage                      filePackage = dirPackage.second();

        final ModelRepository repository = new MetaModelFromSql(filePackage.getQualifiedName()).createRepository(selectedSchema, tablesInSchema);
        final String          dumpedFile = MMDumper.createDumper(repository).models(repository.getModels()).withPackage().toString();

        final FileTemplateBase template = new MMFileTemplate(newName);
        template.setText(dumpedFile);

        try {
            FileTemplateUtil.createFromTemplate(template, newName, null, directory);
        }
        catch (final Exception ignored) {}
    }

    private void initContent() {
        connectionNotTested();

        changeListeners();

        testConnectionButton.addActionListener(e -> onTestConnection());

        jarBrowse.addBrowseFolderListener("Select Driver Library",
            "Library must contain classes implementing the 'java.sql.Driver' class.",
            getProject(),
            LIBRARY_FILE_DESCRIPTOR,
            TextComponentAccessor.TEXT_FIELD_WITH_HISTORY_WHOLE_TEXT);

        jarBrowse.getChildComponent().setHistorySize(5);
        final Project project = event.getProject();
        if (project != null) {
            final List<String> recentEntries = filterNonExisting(RecentsManager.getInstance(project).getRecentEntries(RECENT_KEYS));
            if (recentEntries != null) jarBrowse.getChildComponent().setHistory(recentEntries);
        }
    }

    private void onCancel() {
        dispose();
    }

    private void onOK() {
        if (!fileName.getText().isEmpty()) {
            createButton.setEnabled(false);
            cancelButton.setEnabled(false);
            ApplicationManager.getApplication().runWriteAction(this::generateFile);
            dispose();
        }
        else testConnectionMessageField.setText(COMPLETE_NAME_MESSAGE);
    }

    private void onTestConnection() {
        testConnectionMessageField.setText(PROGRESS_MESSAGE);

        if (connectionURL.getText().isEmpty()) {
            testConnectionMessageField.setText(URL_ERROR_MESSAGE);
            return;
        }

        final String       jarUrl  = jarBrowse.getText();
        final List<Driver> drivers = new DatabaseDriverManager().loadDrivers(jarUrl);

        try {
            if (!drivers.isEmpty()) {
                final Connection connection = createConnection(drivers.get(0));
                if (connection == null) {
                    connectionError();
                    return;
                }
                introspector = DbIntrospector.forConnection(connection, typeFromConnection(connection));

                connectionSuccess();
                jarBrowse.getChildComponent().addCurrentTextToHistory();
                registerRecent(jarUrl);
            }
            else driverError();
        }
        catch (final SQLException e) {
            connectionError();
        }
    }

    private void populateSchemas() {
        schema.setSelectedItem(null);
        schema.removeAllItems();
        schemaPanel.setVisible(true);

        for (final SchemaInfo schemaName : introspector.getSchemas())
            schema.addItem(schemaName);
    }

    private void populateTables(final SchemaInfo schemaInfo) {
        tablesList.clearSelection();

        tablesList.setListData(schemaInfo.getTables().map(TableInfo::getName).toArray(String[]::new));

        tablesList.setSelectionInterval(0, tablesList.getModel().getSize() - 1);
    }

    private void registerRecent(final String jarUrl) {
        final Project project = event.getProject();
        if (project != null) {
            final RecentsManager recentsManager = RecentsManager.getInstance(project);
            final List<String>   recentEntries  = recentsManager.getRecentEntries(RECENT_KEYS);
            if (recentEntries == null || !recentEntries.contains(jarUrl)) recentsManager.registerRecentEntry(RECENT_KEYS, jarUrl);
        }
    }

    private void schemaSelected() {
        populateTables(cast(schema.getSelectedItem()));
    }

    //~ Static Fields ................................................................................................................................

    private static final long serialVersionUID = 2105140007272741590L;

    private static final FileChooserDescriptor LIBRARY_FILE_DESCRIPTOR = new FileChooserDescriptor(false, false, true, true, false, false);

    private static final String INFO_MESSAGE          = "Test connection before continuing";
    private static final String ERROR_MESSAGE         = "Connection unsuccessful";
    private static final String DRIVER_ERROR_MESSAGE  = "Jar doesn't contain driver classes";
    private static final String SUCCESS_MESSAGE       = "Connection successful";
    private static final String PROGRESS_MESSAGE      = "Testing connection...";
    private static final String COMPLETE_NAME_MESSAGE = "Complete file name to create";
    private static final String URL_ERROR_MESSAGE     = "Complete URL";

    private static final String RECENT_KEYS = "DbJars.RECENT_KEYS";
}  // end class IntrospectorDialog
