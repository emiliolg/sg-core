
// ...............................................................................................................................
//
// (C) Copyright  2011/2017 TekGenesis.  All Rights Reserved
// THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF TekGenesis.
// The copyright notice above does not evidence any actual or intended
// publication of such source code.
//
// ...............................................................................................................................

package tekgenesis.lang.mm.settings;

import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.EnumMap;
import java.util.List;

import javax.swing.*;
import javax.swing.border.TitledBorder;

import com.intellij.ide.ui.LafManager;
import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.util.IconLoader;
import com.intellij.ui.JBColor;
import com.intellij.ui.ListCellRendererWrapper;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import com.memetix.mst.language.Language;

import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import tekgenesis.common.core.Strings;
import tekgenesis.lang.mm.MMFileType;
import tekgenesis.lang.mm.translate.KeyManager;
import tekgenesis.lang.mm.translate.LanguageManager;

import static tekgenesis.common.Predefined.cast;

/**
 * Settings for Internationalization.
 */
@SuppressWarnings("ClassWithTooManyFields")
class MMInternationalizeSettings implements Configurable {

    //~ Instance Fields ..............................................................................................................................

    private JButton         addLangButton;
    private JPanel          addLanguagePanel;
    private JTextField      clientIdField;
    private JTextField      clientSecretField;
    private JPanel          currentLanguagePanel;
    private JButton         defaultButton;
    private JButton         helpButton;
    private JList<Language> languageList;
    private JPanel          languagePanel;

    private JPanel  mainPanel;
    private boolean modified;
    private JButton removeButton;
    private JPanel  setKeysPanel;

    private final LanguageManager settings;
    private JTabbedPane           tabbedPane1;
    private JButton               testButton;
    private JLabel                testLabel;
    private JComboBox<Language>   translateFromComboBox;
    private JComboBox<Language>   translateToOthersComboBox;

    //~ Instance initializers ........................................................................................................................

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    //~ Constructors .................................................................................................................................

    /** Settings for Internationalization constructor. */
    public MMInternationalizeSettings() {
        settings = new LanguageManager();
    }

    //~ Methods ......................................................................................................................................

    /** @noinspection  ALL */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    @Override public void apply()
        throws ConfigurationException
    {
        KeyManager.getInstance().setClientID(clientIdField.getText());
        KeyManager.getInstance().setClientSecret(clientSecretField.getText());
        // LanguageManager.getInstance().setTranslateFrom(translateFromComboBox.getSelectedItem().toString());
        LanguageManager.getInstance().loadState(settings.consolidate().getState());
        modified = false;
    }

    @Override
    @SuppressWarnings("unchecked")
    public JComponent createComponent() {
        addLangButton.addActionListener(new AddButtonListener());
        removeButton.addActionListener(new RemoveButtonListener());
        defaultButton.addActionListener(new DefaultButtonListener());
        testButton.addActionListener(new TestButtonListener());
        helpButton.addActionListener(new HelpButtonListener());
        clientIdField.addFocusListener(new FieldListener(clientIdField));
        clientSecretField.addFocusListener(new FieldListener(clientSecretField));

        translateToOthersComboBox.setModel(new OthersComboBoxModel());
        translateToOthersComboBox.setRenderer(new LanguageCellRenderer(true));

        translateFromComboBox.setModel(new LanguageComboBoxModel());
        translateFromComboBox.setRenderer(new LanguageCellRenderer(false));
        translateFromComboBox.addActionListener(e -> {
            final Language language = (Language) translateFromComboBox.getSelectedItem();
            if (settings.getLanguage() != language) {
                settings.setLanguage(language);
                getOthersComboModel().populate();
                setModified();
            }
        });

        clientIdField.setText(KeyManager.getInstance().getClientID());
        clientSecretField.setText(KeyManager.getInstance().getClientSecret());

        setupLanguagesList();

        return mainPanel;
    }

    @Override public void disposeUIResources() {}

    @Override public void reset() {
        settingsUpdated(LanguageManager.getInstance());
    }

    @Override public boolean isModified() {
        return modified;
    }

    @Nls @Override public String getDisplayName() {
        return "MM Internationalize Settings";
    }

    @Override public String getHelpTopic() {
        return "Settings used to configure what languages with be used when internationalizing MM Files";
    }

    /** Returns MM file type icon. */
    @Nullable public Icon getIcon() {
        return MMFileType.INSTANCE.getIcon();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
     * call it in your code!
     *
     * @noinspection  ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        mainPanel.setBackground(new Color(-1118482));
        mainPanel.setOpaque(true);
        mainPanel.setVisible(true);
        tabbedPane1 = new JTabbedPane();
        mainPanel.add(tabbedPane1, BorderLayout.CENTER);
        languagePanel = new JPanel();
        languagePanel.setLayout(new BorderLayout(0, 0));
        tabbedPane1.addTab("Languages", languagePanel);
        currentLanguagePanel = new JPanel();
        currentLanguagePanel.setLayout(new BorderLayout(0, 0));
        currentLanguagePanel.setFocusCycleRoot(false);
        currentLanguagePanel.setFocusTraversalPolicyProvider(false);
        currentLanguagePanel.setInheritsPopupMenu(false);
        languagePanel.add(currentLanguagePanel, BorderLayout.CENTER);
        currentLanguagePanel.setBorder(
            BorderFactory.createTitledBorder(BorderFactory.createLineBorder(SystemColor.windowBorder),
                "Translate To",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                null,
                UIManager.getColor("Label.foreground")));
        final JScrollPane scrollPane1 = new JScrollPane();
        currentLanguagePanel.add(scrollPane1, BorderLayout.CENTER);
        languageList = new JList<Language>();
        languageList.setBackground(SystemColor.window);
        languageList.setEnabled(true);
        final DefaultListModel<Language> defaultListModel1 = new DefaultListModel<Language>();
        languageList.setModel(defaultListModel1);
        languageList.setSelectionMode(2);
        scrollPane1.setViewportView(languageList);
        final JToolBar toolBar1 = new JToolBar();
        currentLanguagePanel.add(toolBar1, BorderLayout.NORTH);
        addLanguagePanel = new JPanel();
        addLanguagePanel.setLayout(new GridBagLayout());
        addLanguagePanel.setBackground(SystemColor.window);
        addLanguagePanel.setFocusCycleRoot(false);
        addLanguagePanel.setFont(UIManager.getFont("ToggleButton.font"));
        addLanguagePanel.setInheritsPopupMenu(false);
        languagePanel.add(addLanguagePanel, BorderLayout.SOUTH);
        addLanguagePanel.setBorder(
            BorderFactory.createTitledBorder(BorderFactory.createLineBorder(SystemColor.windowBorder),
                "Add Other Languages",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                null,
                UIManager.getColor("Label.foreground")));
        translateToOthersComboBox = new JComboBox<Language>();
        final DefaultComboBoxModel<Language> defaultComboBoxModel1 = new DefaultComboBoxModel<Language>();
        translateToOthersComboBox.setModel(defaultComboBoxModel1);
        GridBagConstraints gbc;
        gbc           = new GridBagConstraints();
        gbc.gridx     = 0;
        gbc.gridy     = 0;
        gbc.gridwidth = 5;
        gbc.weightx   = 1.0;
        gbc.anchor    = GridBagConstraints.WEST;
        gbc.fill      = GridBagConstraints.HORIZONTAL;
        addLanguagePanel.add(translateToOthersComboBox, gbc);
        addLangButton = new JButton();
        addLangButton.setText("Add");
        gbc         = new GridBagConstraints();
        gbc.gridx   = 4;
        gbc.gridy   = 1;
        gbc.weightx = 1.0;
        gbc.anchor  = GridBagConstraints.EAST;
        addLanguagePanel.add(addLangButton, gbc);
        defaultButton = new JButton();
        defaultButton.setText("Default");
        gbc       = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill  = GridBagConstraints.HORIZONTAL;
        addLanguagePanel.add(defaultButton, gbc);
        removeButton = new JButton();
        removeButton.setEnabled(false);
        removeButton.setText("Remove");
        gbc       = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill  = GridBagConstraints.HORIZONTAL;
        addLanguagePanel.add(removeButton, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        languagePanel.add(panel1, BorderLayout.NORTH);
        panel1.setBorder(
            BorderFactory.createTitledBorder(BorderFactory.createLineBorder(SystemColor.windowBorder),
                "Translate From",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                null,
                UIManager.getColor("Label.foreground")));
        translateFromComboBox = new JComboBox<Language>();
        panel1.add(translateFromComboBox, BorderLayout.CENTER);
        setKeysPanel = new JPanel();
        setKeysPanel.setLayout(
            new FormLayout("fill:92px:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:342px:noGrow,left:4dlu:noGrow,fill:d:grow",
                "center:max(d;4px):noGrow,top:3dlu:noGrow,center:37px:noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow,top:3dlu:noGrow,center:max(d;4px):noGrow"));
        tabbedPane1.addTab("Set Keys", setKeysPanel);
        setKeysPanel.setBorder(
            BorderFactory.createTitledBorder(BorderFactory.createLineBorder(SystemColor.windowBorder),
                "Set Keys",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                null,
                UIManager.getColor("Label.foreground")));
        final JLabel label1 = new JLabel();
        label1.setText("Client Id");
        CellConstraints cc = new CellConstraints();
        setKeysPanel.add(label1, cc.xy(1, 1));
        clientIdField = new JTextField();
        setKeysPanel.add(clientIdField, cc.xyw(3, 1, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        final JLabel label2 = new JLabel();
        label2.setText("Client Secret");
        setKeysPanel.add(label2, cc.xy(1, 3));
        clientSecretField = new JTextField();
        setKeysPanel.add(clientSecretField, cc.xyw(3, 3, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
        testButton = new JButton();
        testButton.setText("Test");
        setKeysPanel.add(testButton, cc.xy(7, 5, CellConstraints.RIGHT, CellConstraints.DEFAULT));
        helpButton = new JButton();
        helpButton.setText("Help Me!!");
        setKeysPanel.add(helpButton, cc.xyw(5, 7, 3, CellConstraints.RIGHT, CellConstraints.CENTER));
        testLabel = new JLabel();
        testLabel.setEnabled(true);
        testLabel.setText("Label");
        testLabel.setVisible(false);
        setKeysPanel.add(testLabel, cc.xy(5, 5));
    }  // end method $$$setupUI$$$

    private void settingsUpdated(@NotNull final LanguageManager state) {
        settings.loadState(state.getState());
        getLanguagesListModel().populate();
        getFromComboModel().populate().setSelectedItem(settings.getLanguage());
        getOthersComboModel().populate();
    }

    @SuppressWarnings("unchecked")
    private void setupLanguagesList() {
        languageList.setModel(new LanguageListModel());

        languageList.addKeyListener(new KeyAdapter() {
                @Override public void keyPressed(KeyEvent e) {
                    if (e.getKeyChar() == KeyEvent.VK_BACK_SPACE || e.getKeyChar() == KeyEvent.VK_DELETE) removeButton.doClick();
                }
            });

        languageList.addListSelectionListener(e -> {
            final JList<Language> list = cast(e.getSource());
            removeButton.setEnabled(!list.isSelectionEmpty());
        });

        languageList.setCellRenderer(new LanguageCellRenderer(true));
    }

    private LanguageComboBoxModel getFromComboModel() {
        return (LanguageComboBoxModel) translateFromComboBox.getModel();
    }

    private LanguageListModel getLanguagesListModel() {
        return (LanguageListModel) languageList.getModel();
    }

    private void setModified() {
        modified = true;
    }

    private OthersComboBoxModel getOthersComboModel() {
        return (OthersComboBoxModel) translateToOthersComboBox.getModel();
    }

    //~ Static Fields ................................................................................................................................

    private static final EnumMap<Language, Icon> LANGUAGE_ICONS;

    static {
        LANGUAGE_ICONS = new EnumMap<>(Language.class);
        for (final Language language : Language.values()) {
            if (language != Language.AUTO_DETECT) LANGUAGE_ICONS.put(language, IconLoader.getIcon("/tekgenesis/lang/mm/flags/" + language + ".png"));
        }
    }

    //~ Inner Classes ................................................................................................................................

    /**
     * Button used for adding new Languages for Internationalization.
     */
    private class AddButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            final OthersComboBoxModel combo = getOthersComboModel();

            final Language language = combo.getSelectedItem();
            if (language != null) {
                final LanguageListModel list = getLanguagesListModel();

                if (!list.contains(language)) {
                    list.add(language);
                    combo.populate();
                    LafManager.getInstance().updateUI();
                }
            }
        }
    }

    private class DefaultButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            setModified();
            settingsUpdated(new LanguageManager());
        }
    }

    private class FieldListener implements FocusListener {
        @NotNull private final JTextField field;
        private final String              lastText;

        private FieldListener(@NotNull final JTextField field) {
            this.field = field;
            lastText   = field.getText();
        }

        @Override public void focusGained(FocusEvent focusEvent) {}

        @Override public void focusLost(FocusEvent focusEvent) {
            if (!lastText.equals(field.getText())) setModified();
        }
    }

    private class HelpButtonListener implements ActionListener {
        @Override public void actionPerformed(ActionEvent actionEvent) {
            final HelpMMTranslate dialog = new HelpMMTranslate();
            dialog.pack();
            dialog.setLocationRelativeTo(null);
            dialog.setVisible(true);
        }
    }

    private class LanguageCellRenderer extends ListCellRendererWrapper<Language> {
        private final boolean showError;

        public LanguageCellRenderer(boolean error) {
            showError = error;
        }

        @Override
        @SuppressWarnings("rawtypes")
        public void customize(JList list, Language language, int index, boolean selected, boolean hasFocus) {
            if (language != null) {
                setIcon(LANGUAGE_ICONS.get(language));

                final String text = Strings.toWords(language.name());
                setText(text);

                final Language current = getFromComboModel().getSelectedItem();
                if (current == language && showError) {
                    setBackground(JBColor.RED);
                    setText(text + " - Invalid translation: same as origin.");
                }
            }
        }
    }

    /**
     * ComboBox model for "From" languages.
     */
    private static class LanguageComboBoxModel extends AbstractListModel<Language> implements ComboBoxModel<Language> {
        List<Language> languages = null;
        Language       selected  = null;

        @Override public Language getElementAt(int index) {
            return languages.get(index);
        }

        @Override public Language getSelectedItem() {
            return selected;
        }

        @Override public void setSelectedItem(Object s) {
            selected = (Language) s;
        }

        @Override public int getSize() {
            return languages.size();
        }

        LanguageComboBoxModel populate() {
            languages = new ArrayList<>(Language.values().length);
            Collections.addAll(languages, Language.values());
            languages.remove(Language.AUTO_DETECT);
            return this;
        }

        private static final long serialVersionUID = -5117372099666719882L;
    }

    /**
     * Model to delegate on settings.
     */
    private class LanguageListModel extends AbstractListModel<Language> {
        private final List<Language> languages;

        private LanguageListModel() {
            languages = new ArrayList<>();
        }

        public void populate() {
            languages.clear();
            languages.addAll(getTranslations());
        }

        @Nullable @Override public Language getElementAt(int index) {
            return index < languages.size() ? languages.get(index) : null;
        }

        @Override public int getSize() {
            return languages.size();
        }

        private void add(@NotNull final Language language) {
            if (getTranslations().add(language)) {
                languages.add(language);
                setModified();
            }
        }

        private boolean contains(@NotNull final Language language) {
            return languages.contains(language);
        }

        private void remove(@NotNull final Language language) {
            if (getTranslations().remove(language)) {
                languages.remove(language);
                setModified();
            }
        }

        private List<Language> getTranslations() {
            return settings.getTranslations();
        }

        private static final long serialVersionUID = 0L;
    }  // end class LanguageListModel

    /**
     * ComboBox model for "Other" languages.
     */
    private class OthersComboBoxModel extends LanguageComboBoxModel {
        /** Add all available languages but those specified. */
        @Override OthersComboBoxModel populate() {
            super.populate();
            filter(settings.getTranslations());
            final Language from = getFromComboModel().getSelectedItem();
            if (from != null) filter(from);
            return this;
        }

        /** Filter specified languages from model. */
        private void filter(@NotNull final List<Language> filter) {
            filter.forEach(this::filter);
        }

        /** Filter specified language from model. */
        private void filter(@NotNull final Language language) {
            final int current = languages.indexOf(language);
            languages.remove(language);
            if (selected == language || selected == null)
                selected = !languages.isEmpty() ? languages.get(current < languages.size() ? current : 0) : null;
        }

        private static final long serialVersionUID = 5186961495110677982L;
    }

    /**
     * Button used for removing Languages for Internationalization.
     */
    private class RemoveButtonListener implements ActionListener {
        @Override public void actionPerformed(ActionEvent actionEvent) {
            final Language selection = cast(languageList.getSelectedValue());

            if (selection != null) {
                getLanguagesListModel().remove(selection);
                languageList.clearSelection();
                getOthersComboModel().populate();
                LafManager.getInstance().updateUI();
            }
        }
    }

    private class TestButtonListener implements ActionListener {
        @Override public void actionPerformed(ActionEvent actionEvent) {
            if (KeyManager.getInstance().validKeys(clientIdField.getText(), clientSecretField.getText())) {
                testLabel.setText("Correct Keys");
                testLabel.setForeground(JBColor.GREEN);
                testLabel.setVisible(true);
            }
            else {
                testLabel.setText("Incorrect Keys, or no connectivity");
                testLabel.setForeground(JBColor.RED);
                testLabel.setVisible(true);
            }
            LafManager.getInstance().updateUI();
        }
    }
}  // end class MMInternationalizeSettings
