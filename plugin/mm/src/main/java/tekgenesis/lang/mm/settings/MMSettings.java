
// ...............................................................................................................................
//
// (C) Copyright  2011/2017 TekGenesis.  All Rights Reserved
// THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF TekGenesis.
// The copyright notice above does not evidence any actual or intended
// publication of such source code.
//
// ...............................................................................................................................

package tekgenesis.lang.mm.settings;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;
import javax.swing.border.TitledBorder;

import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.util.IconLoader;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.Nullable;

import tekgenesis.lang.mm.translate.ui.RestartDialog;

/**
 */
public class MMSettings implements Configurable {

    //~ Instance Fields ..............................................................................................................................

    private JLabel       bbLabel;
    private JRadioButton bbRadio;
    private JLabel       boLabel;
    private JRadioButton boRadio;
    private String       currentIconPath;
    private JLabel       grayLabel;
    private JRadioButton grayRadio;
    private JLabel       greenLabel;
    private JRadioButton greenRadio;
    private JPanel       mainPanel;
    private boolean      modified;
    private JLabel       rbLabel;
    private JRadioButton rbRadio;
    private JLabel       rgLabel;
    private JRadioButton rgRadio;

    private JTabbedPane  tabbedPane1;
    private JLabel       yrLabel;
    private JRadioButton yrRadio;

    //~ Instance initializers ........................................................................................................................

    {
        // GUI initializer generated by IntelliJ IDEA GUI Designer
        // >>> IMPORTANT!! <<<
        // DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    //~ Constructors .................................................................................................................................

    MMSettings() {
        currentIconPath = MMApplicationSettingManager.getInstance().getMmIconPath();
        modified        = false;
        setupRadioIcon(grayRadio, grayLabel, GRAY_ICONPATH, currentIconPath);
        setupRadioIcon(greenRadio, greenLabel, GREEN_ICONPATH, currentIconPath);
        setupRadioIcon(bbRadio, bbLabel, BB_ICONPATH, currentIconPath);
        setupRadioIcon(rbRadio, rbLabel, RB_ICONPATH, currentIconPath);
        setupRadioIcon(boRadio, boLabel, BO_ICONPATH, currentIconPath);
        setupRadioIcon(rgRadio, rgLabel, RG_ICONPATH, currentIconPath);
        setupRadioIcon(yrRadio, yrLabel, YR_ICONPATH, currentIconPath);
    }

    //~ Methods ......................................................................................................................................

    /** @noinspection  ALL */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    @Override public void apply()
        throws ConfigurationException
    {
        MMApplicationSettingManager.getInstance().setMmIconPath(currentIconPath);
        modified = false;
        new RestartDialog();
    }

    @Nullable @Override public JComponent createComponent() {
        return mainPanel;
    }

    @Override public void disposeUIResources() {}

    @Override public void reset() {}

    @Override public boolean isModified() {
        return modified;
    }

    @Nls @Override public String getDisplayName() {
        return "MMSettings";
    }

    @Nullable @Override public String getHelpTopic() {
        return null;
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
     * call it in your code!
     *
     * @noinspection  ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        tabbedPane1 = new JTabbedPane();
        mainPanel.add(tabbedPane1, BorderLayout.CENTER);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Apperance", panel1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 15, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2,
            new GridConstraints(0,
                0,
                1,
                2,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_BOTH,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                null,
                null,
                null,
                0,
                false));
        panel2.setBorder(
            BorderFactory.createTitledBorder(null,
                "Icon",
                TitledBorder.DEFAULT_JUSTIFICATION,
                TitledBorder.DEFAULT_POSITION,
                null,
                UIManager.getColor("Label.foreground")));
        grayRadio = new JRadioButton();
        grayRadio.setSelected(false);
        grayRadio.setText("");
        panel2.add(grayRadio,
            new GridConstraints(0,
                0,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        greenRadio = new JRadioButton();
        greenRadio.setSelected(false);
        greenRadio.setText("");
        panel2.add(greenRadio,
            new GridConstraints(0,
                2,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        greenLabel = new JLabel();
        greenLabel.setText("");
        greenLabel.setToolTipText("Green And Blue's Clues");
        panel2.add(greenLabel,
            new GridConstraints(0,
                3,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        bbRadio = new JRadioButton();
        bbRadio.setText("");
        panel2.add(bbRadio,
            new GridConstraints(0,
                4,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        bbLabel = new JLabel();
        bbLabel.setText("");
        bbLabel.setToolTipText("Blue blue blue ");
        panel2.add(bbLabel,
            new GridConstraints(0,
                5,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        rbRadio = new JRadioButton();
        rbRadio.setText("");
        panel2.add(rbRadio,
            new GridConstraints(0,
                6,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        rbLabel = new JLabel();
        rbLabel.setText("");
        rbLabel.setToolTipText("CASLA?");
        panel2.add(rbLabel,
            new GridConstraints(0,
                7,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        boRadio = new JRadioButton();
        boRadio.setText("");
        panel2.add(boRadio,
            new GridConstraints(0,
                8,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        boLabel = new JLabel();
        boLabel.setText("");
        boLabel.setToolTipText("Sleak Orange Blue Combo");
        panel2.add(boLabel,
            new GridConstraints(0,
                9,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        rgRadio = new JRadioButton();
        rgRadio.setText("");
        panel2.add(rgRadio,
            new GridConstraints(0,
                10,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        rgLabel = new JLabel();
        rgLabel.setText("");
        rgLabel.setToolTipText("Red! Green! the most powerful PowerRangers");
        panel2.add(rgLabel,
            new GridConstraints(0,
                11,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        yrRadio = new JRadioButton();
        yrRadio.setText("");
        panel2.add(yrRadio,
            new GridConstraints(0,
                12,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        yrLabel = new JLabel();
        yrLabel.setText("");
        yrLabel.setToolTipText("MasterC..., MasterChief :O");
        panel2.add(yrLabel,
            new GridConstraints(0,
                13,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final Spacer spacer1 = new Spacer();
        panel2.add(spacer1,
            new GridConstraints(0,
                14,
                1,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_HORIZONTAL,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                1,
                null,
                null,
                null,
                0,
                false));
        grayLabel = new JLabel();
        grayLabel.setText("");
        panel2.add(grayLabel,
            new GridConstraints(0,
                1,
                1,
                1,
                GridConstraints.ANCHOR_WEST,
                GridConstraints.FILL_NONE,
                GridConstraints.SIZEPOLICY_FIXED,
                GridConstraints.SIZEPOLICY_FIXED,
                null,
                null,
                null,
                0,
                false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2,
            new GridConstraints(1,
                1,
                2,
                1,
                GridConstraints.ANCHOR_CENTER,
                GridConstraints.FILL_VERTICAL,
                1,
                GridConstraints.SIZEPOLICY_WANT_GROW,
                null,
                null,
                null,
                0,
                false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(grayRadio);
        buttonGroup.add(greenRadio);
        buttonGroup.add(bbRadio);
        buttonGroup.add(rbRadio);
        buttonGroup.add(boRadio);
        buttonGroup.add(rgRadio);
        buttonGroup.add(yrRadio);
    }  // end method $$$setupUI$$$

    private void setupRadioIcon(JRadioButton radioButton, JLabel label, String iconPath, String checkPath) {
        label.setIcon(IconLoader.findIcon(iconPath));
        radioButton.addActionListener(new ModifiedAction(iconPath));
        radioButton.setSelected(iconPath.equals(checkPath));
    }

    //~ Static Fields ................................................................................................................................

    public static final String  GRAY_ICONPATH  = "/tekgenesis/lang/mm/MMIcon18.png";
    private static final String GREEN_ICONPATH = "/tekgenesis/lang/mm/MMIcon16.png";
    private static final String BB_ICONPATH    = "/tekgenesis/lang/mm/MMIcon7.png";
    private static final String RB_ICONPATH    = "/tekgenesis/lang/mm/MMIcon9.png";
    private static final String BO_ICONPATH    = "/tekgenesis/lang/mm/MMIcon10.png";
    private static final String RG_ICONPATH    = "/tekgenesis/lang/mm/MMIcon11.png";
    private static final String YR_ICONPATH    = "/tekgenesis/lang/mm/MMIcon12.png";

    //~ Inner Classes ................................................................................................................................

    private class ModifiedAction implements ActionListener {
        private final String iconPath;

        public ModifiedAction(String iconPath) {
            this.iconPath = iconPath;
        }

        @Override public void actionPerformed(ActionEvent e) {
            if (!currentIconPath.equals(iconPath)) {
                currentIconPath = iconPath;
                modified        = true;
            }
        }
    }
}  // end class MMSettings
