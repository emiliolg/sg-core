apply plugin: 'war'

configurations {
    all*.exclude group: 'org.eclipse.jetty', module: 'apache-jsp'
}

dependencies {
    implementation gwtDev
    implementation gwtUser
    implementation gwtServlet

    implementation project(':form:serializer')
    implementation project(':parser:metamodel')
    implementation project(':parser:common')
    implementation project(':server:core')
    implementation project(':metadata:expr')
    implementation project(':metadata:util')
    implementation project(':metadata:workflow')
    implementation project(':runtime:cluster')
    implementation project(':runtime:persistence')
    implementation project(':runtime:metrics')
    implementation project(':runtime:web')
    implementation project(':runtime:task')
    implementation project(':db:base')
    implementation project(':db:cache')
    implementation project(':db:entity')
    implementation project(':db:etl')
    implementation project(':db:transaction')
    implementation project(':ix:db')
    implementation project(':metadata:entity')
    implementation project(':metadata:handler')
    implementation project(':projects:inbox')
    implementation project(':projects:admin')
    implementation project(':projects:console')
    implementation project(':projects:authorization')
    implementation project(':projects:social')
    implementation project(':process:core')
    implementation project(':metadata:builder')
    implementation project(':metadata:form')
    implementation project(':metadata:type')
    implementation project(':metadata:authorization')
    implementation project(':codegen:base')
    implementation project(':codegen:metamodel')
    implementation (gwtAjaxUpload) {
        exclude group: 'junit', module: 'junit'
        exclude group: 'com.google.gwt', module: 'gwt-dev'
    }
    implementation fileUpload
    implementation commonsIo
    implementation infinispan
    implementation jackson
    implementation jacksonDataBind
    implementation hsqldb
    implementation oracle
    implementation postgres
    implementation apacheShiroWeb
    implementation gflot
    implementation openlayers
    implementation gwtCropper
    implementation jettyServlets
    implementation pegdown
    implementation logback_classic
    implementation jodaTime
    implementation (lessCssCompiler) { exclude group: 'org.slf4j', module: 'slf4j-simple' }
    implementation hikari
    implementation javaMail

    implementation javaxInject
    implementation slf4j
    implementation jul_to_slf4j
    runtimeOnly scribe
    //compileOnly commonGwt
    //testImplementation commonGwt

    testImplementation project(':server:core').sourceSets.test.output
    testImplementation project(':server:cluster')
    testImplementation project(':samples:basic')
    testImplementation project(':samples:showcase')
    testRuntimeOnly project(':runtime:mail')
    testRuntimeOnly files("${System.properties['java.home']}/../lib/tools.jar",
                        "src/test/java",
                        "src/main/java",
                        "../serializer/src/main/java",
                        "../../common/core/src/main/java",
                        "../../metadata/type/src/main/java",
                        "../../metadata/form/src/main/java",
                        "../../metadata/expr/src/main/java")
}

def gwtDir =  new File(project.buildDir, "gwt")

test {
    maxHeapSize '2048M'
    enableAssertions = false
    systemProperty 'gwt.args', '-sourceLevel 1.8 -localWorkers 3 -draftimplementation -logLevel ERROR -devMode'
    systemProperty 'gwt.persistentunitcache', false

    // debug true
}

task compileGwt (dependsOn: classes, type: JavaExec) {

    inputs.file sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir gwtDir

    // Workaround for incremental build (GRADLE-1483)
    outputs.upToDateSpec = new AndSpec()

    doFirst {
        file(buildDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
                sourceSets.main.java.srcDirs,           // Java source
                sourceSets.main.output.resourcesDir,    // Generated resources
                sourceSets.main.output.classesDirs.singleFile,      // Generated classes
                sourceSets.main.compileClasspath,       // Deps
                files("../../common/core/src/main/java",
                "../../form/serializer/src/main/java",
                "../../metadata/type/src/main/java",
                "../../metadata/form/src/main/java",
                "../../metadata/expr/src/main/java")
        ]
    }

    def module = System.getProperty('gwt.module', 'tekgenesis.sgforms-dev')
    def style = System.getProperty('gwt.compileStyle', 'OBF')
    def draft = Boolean.getBoolean('gwt.draft')
    def workers = Integer.getInteger('gwt.workers', 3)

    def gwtArgs =
            [
                module,
                '-war', gwtDir.absolutePath,
                '-sourceLevel', '1.8',
                '-localWorkers', workers,
                '-style', style,
                '-extra', project.buildDir.absolutePath + "/extra",
            ]

    if(draft) gwtArgs.add('-draftCompile')

    args = gwtArgs

    maxHeapSize = '2048M'
}

task explodedWar(type: Sync) {
    into project.buildDir.absolutePath+"/webapp"
    exclude  "**/META-INF/MANIFEST.MF"
    with war
}

war {
    classpath = classpath.filter{file ->
       !file.name.startsWith("gwt-dev") && !file.name.startsWith("gwt-user") && !file.name.startsWith("jetty-server") && !file.name.startsWith("junit")
    }
    from gwtDir
}

war.dependsOn compileGwt
explodedWar.dependsOn compileGwt
build.dependsOn explodedWar
